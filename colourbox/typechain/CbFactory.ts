/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewTrack = ContractEventLog<{
  trackAddress: string;
  minter: string;
  baseUri: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface CbFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CbFactory;
  clone(): CbFactory;
  methods: {
    createTrack(
      _salesContract: string,
      _minter: string,
      _count: number | string | BN,
      _forSaleBegin: number | string | BN,
      _forSaleEnd: number | string | BN,
      _baseUri: string
    ): PayableTransactionObject<void>;

    fees(): NonPayableTransactionObject<string>;

    getCbTrackAddress(_baseUri: string): NonPayableTransactionObject<string>;

    master(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    updateFees(_fees: number | string | BN): NonPayableTransactionObject<void>;
  };
  events: {
    NewTrack(cb?: Callback<NewTrack>): EventEmitter;
    NewTrack(options?: EventOptions, cb?: Callback<NewTrack>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewTrack", cb: Callback<NewTrack>): void;
  once(event: "NewTrack", options: EventOptions, cb: Callback<NewTrack>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
