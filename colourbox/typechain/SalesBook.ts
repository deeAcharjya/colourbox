/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewOrder = ContractEventLog<{
  contractId: string;
  seller: string;
  cbContractAddress: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface SalesBook extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SalesBook;
  clone(): SalesBook;
  methods: {
    computeId(
      _cbContractAddress: string,
      bidder: string
    ): NonPayableTransactionObject<string>;

    contracts(arg0: string | number[]): NonPayableTransactionObject<{
      cbContractAddress: string;
      tokenId: string;
      price: string;
      seller: string;
      expiresOn: string;
      created: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    createOrder(
      _cbContractAddress: string,
      _tokenId: number | string | BN,
      _price: number | string | BN,
      _expiresOn: number | string | BN
    ): PayableTransactionObject<void>;

    fulfill(
      _contractId: string | number[],
      _begin: number | string | BN,
      _end: number | string | BN
    ): PayableTransactionObject<void>;

    getOrder(_contractId: string | number[]): NonPayableTransactionObject<{
      cbContractAddress: string;
      tokenId: string;
      price: string;
      seller: string;
      expiresOn: string;
      created: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    updateBid(
      _contractId: string | number[],
      _expiresOn: number | string | BN,
      _tokenId: number | string | BN,
      _price: number | string | BN
    ): NonPayableTransactionObject<void>;

    withdraw(_contractId: string | number[]): NonPayableTransactionObject<void>;
  };
  events: {
    NewOrder(cb?: Callback<NewOrder>): EventEmitter;
    NewOrder(options?: EventOptions, cb?: Callback<NewOrder>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewOrder", cb: Callback<NewOrder>): void;
  once(event: "NewOrder", options: EventOptions, cb: Callback<NewOrder>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
